# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Enhanced Dependency Scanning and Auto-Remediation

env:
  JAVA_VERSION: '11'
  PYTHON_VERSION: '3.9'
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
  JIRA_PROJECT_KEY: 'SEC'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write
  packages: write
  dependencies: write
  repositories: write
  actions: write
  marketplace-pull-requests: write
  notifications: write
  checks: write
  dependencies-scan: write
  labels: write
  repository-projects: write
  workflow-dispatches: write
  id-token: write
  pages: write
  discussions: write
  jira: write
  host-pinning: write
  git-ssh: write
  file-entries: write
  deployments: write
  secret-scanning: write
  deployments-scan: write
  pull-requests-scan: write
  security-events-scan: write
  code-scanning: write
  code-scanning-scan: write
  code-scanning-upload-sarif: write
  code-scanning-sarif-upload: write
  security-events-upload-sarif: write 
  security-events-sarif-upload: write
  security-events-scan-sarif-upload: write
  

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight

jobs:
  dependency-scan-and-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install Clojure dependencies
      - name: Install Clojure dependencies
        run: |
          clojure -Stree
          clojure -P

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Clojure Dependency Scanning
      - name: Scan Clojure dependencies
        uses: clj-holmes/clj-watson-action@v4.0.1
        with:
          database-strategy: github-advisory
          aliases: clojure-lsp,test
          deps-edn-path: deps.edn
          suggest-fix: true
          output-type: sarif
          output-file: clojure-results.sarif
          fail-on-result: false

      # Python Dependency Scanning
      - name: Scan Python dependencies
        uses: pyupio/pyup-action@v1.0.0
        with:
          sarif_file: python-results.sarif

      # Upload SARIF files for both scans
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            clojure-results.sarif
            python-results.sarif

      # Automatically update vulnerable Clojure dependencies
      - name: Update Clojure dependencies
        run: |
          clojure -Sforce -Spom
          clojure -M:deps ancient upgrade :all --force-cli
          clojure -M:deps tree > deps-tree.txt

      # Automatically update vulnerable Python dependencies
      - name: Update Python dependencies
        run: |
          python -m pip install -U pip
          pip install -U safety
          safety check --full-report
          pip install -U -r requirements.txt
          pip freeze > requirements.txt

      # Commit dependency updates
      - name: Commit dependency updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update dependencies'
          branch: dependency-updates-${{ github.ref }}

      # Create pull request with dependency updates
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            ## Dependency Updates

            This pull request updates dependencies to their latest versions based on the vulnerability scan results.
            Please review and merge these changes to resolve potential security vulnerabilities.

            ### Clojure Dependencies
            ```
            ${{ steps.clojure-deps.outputs.deps-tree }}
            ```

            ### Python Dependencies
            ```
            ${{ steps.python-deps.outputs.requirements }}
            ```
          branch: dependency-updates-${{ github.ref }}
          labels: dependencies, security

      # Update issues with fix details
      - name: Update Issues
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const clojureSarif = JSON.parse(fs.readFileSync('clojure-results.sarif', 'utf8'));
            const pythonSarif = JSON.parse(fs.readFileSync('python-results.sarif', 'utf8'));

            for (const result of [...clojureSarif.runs[0].results, ...pythonSarif.runs[0].results]) {
              const issueTitle = `Vulnerability: ${result.message.text}`;
              const issueBody = `
                ## Vulnerability Details

                A vulnerability was detected in a ${result.locations[0].physicalLocation.artifactLocation.uri} dependency.

                - **Description:** ${result.message.text}
                - **Severity:** ${result.properties.severity}
                - **Vulnerability ID:** ${result.ruleId}

                ## Remediation

                A pull request has been created to update the affected dependencies: #${context.payload.pull_request.number}

                Please review and merge the pull request to resolve this vulnerability.
              `;

              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
              });

              const existingIssue = issues.data.find(issue => issue.title === issueTitle);

              if (existingIssue) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: `
                    ## Automated Fix

                    A fix has been automatically implemented for this vulnerability in pull request #${context.payload.pull_request.number}.
                    Please review and merge the pull request to close this issue.
                  `,
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['vulnerability'],
                });
              }
            }

      # Close issues when pull request is merged
      - name: Close Issues on Merge
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        with:
          script: |
            const pullRequestBody = context.payload.pull_request.body;
            const issueNumbers = pullRequestBody.match(/#\d+/g);

            if (issueNumbers) {
              for (const issueNumber of issueNumbers) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber.slice(1)),
                  state: 'closed',
                });
              }
            }

      # Add security label to pull request
      - name: Add Security Label to Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['security'],
            });

      # Notify on Slack
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: alerts
          if_mention: failure,cancelled
          job_name: Dependency Scan and Auto-Remediation
          mention: here
          if_job_failure_mention: channel
          fields: repo,commit,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      # Trigger downstream workflows
      - name: Trigger Downstream Workflows
        if: success()
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflows: |
            code-analysis.yml
            integration-tests.yml
            deployment.yml
          token: ${{ secrets.WORKFLOW_TRIGGER_TOKEN }}

      # Output scan results
      - name: Output Scan Results
        run: |
          echo "## Clojure Scan Results" >> $GITHUB_STEP_SUMMARY
          cat clojure-results.sarif >> $GITHUB_STEP_SUMMARY
          echo "## Python Scan Results" >> $GITHUB_STEP_SUMMARY
          cat python-results.sarif >> $GITHUB_STEP_SUMMARY


jobs:
  dependency-scan-and-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install Clojure dependencies
      - name: Install Clojure dependencies
        run: |
          clojure -Stree
          clojure -P

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Clojure Dependency Scanning with Snyk
      - name: Scan Clojure dependencies with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=low --fail-on=all --sarif-file-output=snyk-clojure-results.sarif
          file: deps.edn

      # Python Dependency Scanning with Snyk
      - name: Scan Python dependencies with Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --severity-threshold=low --fail-on=all --sarif-file-output=snyk-python-results.sarif

      # Upload SARIF files for both scans
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            snyk-clojure-results.sarif
            snyk-python-results.sarif

      # Automatically update vulnerable Clojure dependencies with Snyk
      - name: Update Clojure dependencies with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          command: fix
          file: deps.edn

      # Automatically update vulnerable Python dependencies with Snyk
      - name: Update Python dependencies with Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          command: fix

      # Commit dependency updates
      - name: Commit dependency updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update dependencies'
          branch: dependency-updates-${{ github.ref }}

      # Create pull request with dependency updates
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            ## Dependency Updates

            This pull request updates dependencies to their latest versions based on the vulnerability scan results.
            Please review and merge these changes to resolve potential security vulnerabilities.

            ### Clojure Dependencies
            ```
            ${{ steps.clojure-deps.outputs.deps-tree }}
            ```

            ### Python Dependencies
            ```
            ${{ steps.python-deps.outputs.requirements }}
            ```
          branch: dependency-updates-${{ github.ref }}
          labels: dependencies, security

      # Create Jira issues for vulnerabilities
      - name: Create Jira Issues
        uses: atlassian/gajira-create@v3
        with:
          project: ${{ env.JIRA_PROJECT_KEY }}
          issuetype: Security
          summary: "Vulnerability: ${{ github.event.repository.name }} - ${{ github.ref }}"
          description: |
            ## Vulnerability Details

            Repository: ${{ github.event.repository.name }}
            Branch: ${{ github.ref }}

            Vulnerability scan results:
            - Clojure: ${{ steps.clojure-scan.outputs.vulnerabilities }}
            - Python: ${{ steps.python-scan.outputs.vulnerabilities }}

            A pull request has been created to address these vulnerabilities: ${{ steps.create-pr.outputs.pull-request-url }}
          fields: '{"customfield_10000": "${{ steps.clojure-scan.outputs.vulnerabilities }}", "customfield_10001": "${{ steps.python-scan.outputs.vulnerabilities }}"}'
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ env.JIRA_TOKEN }}

      # Notify on Microsoft Teams
      - name: Notify on Microsoft Teams
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.MSTEAMS_WEBHOOK }}
          title: Dependency Scan Results
          summary: Vulnerability scan completed for ${{ github.event.repository.name }}
          text: |
            Scan results:
            - Clojure: ${{ steps.clojure-scan.outputs.vulnerabilities }}
            - Python: ${{ steps.python-scan.outputs.vulnerabilities }}

            Pull Request: ${{ steps.create-pr.outputs.pull-request-url }}
            Jira Issue: ${{ steps.create-jira-issue.outputs.issue-url }}

      # Trigger DAST scan
      - name: Trigger DAST Scan
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: dast-scan
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

      # Run Clojure tests
      - name: Run Clojure Tests
        run: clojure -M:test

      # Run Python tests
      - name: Run Python Tests
        run: python -m unittest discover tests/

      # Output scan results and pull request details
      - name: Output Scan Results
        run: |
          echo "## Clojure Scan Results" >> $GITHUB_STEP_SUMMARY
          cat snyk-clojure-results.sarif >> $GITHUB_STEP_SUMMARY
          echo "## Python Scan Results" >> $GITHUB_STEP_SUMMARY
          cat snyk-python-results.sarif >> $GITHUB_STEP_SUMMARY
          echo "## Pull Request Details" >> $GITHUB_STEP_SUMMARY
          echo "Pull Request: ${{ steps.create-pr.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY
          echo "## Jira Issue Details" >> $GITHUB_STEP_SUMMARY
          echo "Jira Issue: ${{ steps.create-jira-issue.outputs.issue-url }}" >> $GITHUB_STEP_SUMMARY
